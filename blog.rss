<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Dscho's Git log</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html</link>
<atom:link href="http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=blog.rss" rel="self" type="application/rss+xml"/>
<description>A few stories told by Dscho</description>
<lastBuildDate>Mon, 11 May 2009 00:49:19 +0200</lastBuildDate>
<language>en-us</language>
<item>
<title>Working on jgit diff</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1241995759</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1241995759</guid>
<pubDate>Mon, 11 May 2009 00:49:19 +0200</pubDate>
<description><![CDATA[Working on jgit diff
</p><p>
Shawn did so many useful things that I use on a daily basis that I felt really
awful when I realized just how <u>long</u> I had promised to clean up that diff
implementation I wrote for JGit.
</p><p>
Alas, it appears that the thing turned out to be almost a complete rewrite, as
the original implementation walked the edit graph in a rather inefficient way.
</p><p>
A little background: Myers' algorithm to generate "an edit script" works on
the <i>edit graph</i>: imagine you have all lines of file <i>A</i> as columns and
all lines of file <i>B</i> as rows, then the <i>edit graph</i> is a connection of
the upper left corner to the lower right corner, containing only horizontal,
vertical or diagonal elements, where diagonal elements are only allowed when
the lines of both files agree at that point:
</p><p>
<pre>
 H E L L O , W O R L D
 ----
L    \
      ---
O        \
          ---
W            \
              --------
</pre>
</p><p>
The <i>shortest</i> edit path minimizes the number of non-diagonal elements.
</p><p>
Myers' idea is to develop forward and backward paths at the same time
(increasing the number of non-diagonal elements uniformly), storing
only the latest end points.  Once the paths meet, divide and conquer.
</p><p>
In theory, it would be quicker to store <u>all</u> end points and then just
reconstruct the shortest paths, alas, this takes way too much memory.
</p><p>
My first implementation did not remember start or end of the non-diagonal
parts, and had to recurse way more often than really necessary (in the end,
we will order the non-diagonal parts into horizontal and vertical parts
anyway, so start and end are sufficient).
</p><p>
The current progress can be seen <a href=http://repo.or.cz/w/egit/dscho.git/>
here</a>.]]></description>
</item>
<item>
<title>No time for Git</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1239975597</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1239975597</guid>
<pubDate>Fri, 17 Apr 2009 15:39:57 +0200</pubDate>
<description><![CDATA[No time for Git
</p><p>
It is a shame, but most of my Git time budget is taken by msysGit these
days.
</p><p>
But at least msysGit is moving again; I'll probably write a Herald about
it.]]></description>
</item>
<item>
<title>How to recover from a hackathon</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1238970571</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1238970571</guid>
<pubDate>Mon, 06 Apr 2009 00:29:31 +0200</pubDate>
<description><![CDATA[How to recover from a hackathon
</p><p>
Phew, 2 crazy and fantastic weeks are behind me.  But it takes its toll:
a weekend I was more offline than online.
</p><p>
Things that are important now: relax. sleep. take a walk. learn to sleep
more than 4 hours a night again. learn to watch a movie without thinking
about code. go for a run.
</p><p>
And after recovering, back to the rebase-i-p branch!]]></description>
</item>
<item>
<title>So, what is missing from my rebase-i-p branch?</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1236554268</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1236554268</guid>
<pubDate>Mon, 09 Mar 2009 00:17:48 +0100</pubDate>
<description><![CDATA[So, what is missing from my <i>rebase-i-p</i> branch?
</p><p>
I regularly use <i>rebase -i -p</i> these days, to update my personal Git
tree (which used to be <i>my-next</i>).
</p><p>
There are a few things missing before I can start assembling a patch
series for submission:
</p><p>
<ul>
<li>I need to handle the commit parents which are outside of the rebased
ones properly.  In other words, when a commit is picked whose parent is
not rebased, it needs to be rebased onto $ONTO.
<li>The patch which uses patch-id to generate DROPPED directly also tries to
consolidate the handling of DROPPED commits by putting them into REWRITTEN
instead of DROPPED, but that breaks the tests.  So, this patch needs to be
split.
<li>I want to introduce one more command, <i>rephrase</i>, which allows you to
modify the commit message, and nothing more, and <i>halt</i>, which does the
same as <i>edit</i> without <i>pick</i>.  Then there needs to be a new test script
for those commands, and this will be an early patch series.
<li>Time.  I need time, desperately.  If my day job was not as exciting as it
is, I would have more time for Git.  As it is, I have to budget my time so
that I get anything done at all.
</ul>
</p><p>
These issues have been postponed due to Steffen taking a well-deserved
vacation, which means that I have to act as msysGit maintainer again.
</p><p>
And this coming week, I will have other things to do in all likeliness, so
that I expect to be able to submit a <i>rebase -i -p</i> patch series only next
week.  If not then, due to a heavy workload, it will be postponed to early
April.
</p><p>
Oh well, the joys of being excited by several competing projects! &#x263a;]]></description>
</item>
<item>
<title>New Git for Windows version</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1236479389</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1236479389</guid>
<pubDate>Sun, 08 Mar 2009 03:29:49 +0100</pubDate>
<description><![CDATA[New Git for Windows version
</p><p>
Phew.  That was quite a day, almost exclusively spent on finishing that
installer.  The worst part: updating GCC seemed not to be such a good idea
after all...
</p><p>
For Windows, we need to use the printf format <i>%I64u</i> (which is
non-standard, in the common way of Microsoft) if you want to print 64-bit
wide unsigned numbers.  The rest of the world accepts the standard <i>%llu</i>.
</p><p>
After upgrading to the new GCC, a lot of warnings appeared, complaining
about <i>%I64u</i>.  The warnings went away when I replaced the format with
<i>%llu</i>.
</p><p>
Being the naive I am, I mistook that for a sign that we could finally go
more standards-compliant.
</p><p>
However, it only means that we have to live with the warnings for now, as
the C runtime provided on Windows still strongly disagrees with standards
(and it has to continue to do so, lest it break existing programs).
</p><p>
Sigh.
</p><p>
At least I have the feeling that I caught the most important bugs before
releasing.]]></description>
</item>
<item>
<title>Code reviews</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1235092615</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1235092615</guid>
<pubDate>Fri, 20 Feb 2009 02:16:55 +0100</pubDate>
<description><![CDATA[Code reviews
</p><p>
It has been said that reviewing patches is a most thankless job.  As I really
like the elegance of Git's source code, and care a lot about it, I did not
think that it was thankless, just a little bit tedious (especially when the
patch authors mistake criticism for personal attacks).
</p><p>
Usually, I am pretty good at ignoring insults as responses to my comments;
after all, I have a lot more enjoyable things to do than to spend time talking
to a guy who shows how wise he is when he thinks that I criticize him
<u>personally</u> when I just try to enhance his work, by offering a little bit of
my knowledge.
</p><p>
However, in the last days, three people really seemed to want to insult me,
to make me go away, to stop the fun I have with Git.
</p><p>
And they almost succeeded.
</p><p>
So I guess it is time to reassess my priorities, and maybe stop reviewing
Git patches altogether.]]></description>
</item>
<item>
<title>Interactive rebase just learnt a new command: topic</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1234409395</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1234409395</guid>
<pubDate>Thu, 12 Feb 2009 04:29:55 +0100</pubDate>
<description><![CDATA[Interactive <i>rebase</i> just learnt a new command: <i>topic</i>
</p><p>
Today I am pretty pleased with myself.  Two projects at my day job got a real
boost, and I implemented a shortcut that avoids the ugly 'bookmark' statement
in rebase scripts most of the time.
</p><p>
A typical rebase script, generated by <i>git rebase -i -p $COMMIT</i> will look
something like this:
</p><p>
<table
				border=1 bgcolor=white>
			<tr><td bgcolor=lightblue colspan=3>
				<pre>                                                                                </pre>
			</td></tr>
			<tr><td>
				<table cellspacing=5 border=0
					 style="color:black;">
				<tr><td>
					<pre>
pick 1234567 My first commit
topic begin super-cool-feature
pick 2345678 The super cool feature
pick 3456789 Documentation for the super cool feature
topic end super-cool-feature
</pre>
				</td></tr>
				</table>
			</td></tr>
			</table>
</p><p>
The result will be a merge commit at the HEAD whose first parent is
"My first commit", whose second parent is "Documentation for the super
cool feature" and whose commit message is "Merge branch 'super-cool-feature'".
</p><p>
Side note: internally, <i>topic begin $NAME [at $COMMIT]</i> will be handled as if
you wrote <i>bookmark merge-parent-of-$NAME; goto $COMMIT</i>, and
<i>topic end $NAME [$MESSAGE]</i> will be handled as if you wrote
<i>bookmark $NAME; goto merge-parent-of-$NAME; merge parents $NAME [original $MARK Merge branch '$NAME']</i>.
</p><p>
Of course, being more concise, the 'topic' statement is not only nicer to the
eye, but also less error-prone.
</p><p>
And hopefully many people will agree with me that this rebase script is pretty
intuitive.]]></description>
</item>
<item>
<title>Thunderbird, oh Thunderbird, you always make my small brain hurt</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1234320806</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1234320806</guid>
<pubDate>Wed, 11 Feb 2009 03:53:26 +0100</pubDate>
<description><![CDATA[Thunderbird, oh Thunderbird, you always make my small brain hurt
</p><p>
There was a lengthy discussion on the Git mailing list about using Thunderbird,
a not quite unpopular mailing program, to send inline patches.
</p><p>
It is really kind of sad that the Thunderbird developers do not see how
stubbornly they offend quite a number of people and scare them away from their
program.  After all, you should try to be liberal in what you accept and strict
in what you emit.  No, that does not mean that you should force others to
switch their mailers because you strictly adher to your philosophy in what you
emit, ignoring the rest of the world.
</p><p>
In any case, I am not affected (as long as I do not get mails from a poor soul
stuck with Thunderbird).
</p><p>
But I was a bit mean to that Thunderbird guy I dragged into the discussion, and
he seems really offended.
</p><p>
So I thought I'd give him a real reason to feel offended: I'll just do his work: 
</p><p>
http://repo.or.cz/w/UnFlowedThunderbird.git
</p><p>
It took my free time of two days, being not a Thunderbird developer myself.
Hopefully it works, and hopefully some people will feel really ashamed now.]]></description>
</item>
<item>
<title>format-patch --thread and Alpine</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1234141489</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1234141489</guid>
<pubDate>Mon, 09 Feb 2009 02:04:49 +0100</pubDate>
<description><![CDATA[<i>format-patch --thread</i> and Alpine
</p><p>
I started recently to pipe the output of
<i>git format-patch --cover-letter --stdout ...</i> directly into the
<i>postponed-msgs</i> folder Alpine uses, instead of pasting files into the
mailer.
</p><p>
The idea is to pretend that I continue a postponed mail, but in reality I
never wrote it, <i>format-patch</i> did.
</p><p>
However, I had problems with the <i>--thread</i> option that is implied by
<i>--cover-letter</i>.  Alpine always generated new message IDs without adjusting
the <i>In-reply-to:</i> and <i>References:</i> headers of the other mails.
</p><p>
Now I found out that the reason is that the <i>Fcc:</i> headers were missing in
the mails, and Alpine generated them, making up new message IDs in the process.
</p><p>
Therefore I have an alias now which sets not only the <i>Fcc:</i> header, but also
the <i>To:</i> headers by rewriting the stream using <i>sed</i>.  This is slightly
ugly, but so is the handling of headers in <i>format-patch</i>: if you thought
you could specify arbitrary headers using the command line, you are mistaken:
you can do that only by editing the config.
</p><p>
While at it, I also noticed a bug whereby <i>--thread --in-reply-to=...</i> simply
forgets the <i>--thread</i>.  Maybe this week I will find time to address this bug.]]></description>
</item>
<item>
<title>rebase updates</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1234140696</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1234140696</guid>
<pubDate>Mon, 09 Feb 2009 01:51:36 +0100</pubDate>
<description><![CDATA[<i>rebase</i> updates
</p><p>
Phew.  The last few days, I was mainly chasing bugs I introduced due to being
too tired to work on the merge-preserving, interactive <i>rebase</i>.
</p><p>
But finally I have something I can start working with.  After my failed
experiment to use git-blame to split topic branches, I will sort the commits
in my <i>my-next</i> branch into topic branches manually.
</p><p>
Then I will add an option to <i>rebase -i -p</i> to rewrite refs which point to
rewritten commits, so that I can have branches <i>rebase-i-p</i>, <i>add-e</i>, etc
and all of them are automatically updated when I <i>rebase -i -p</i> the <i>my-next</i>
branch.
</p><p>
In the process, not only have I learnt the value of the <i>bookmark</i> command,
but made quite a few-much needed cleanups (which make
<i>git-rebase--interactive.sh</i> longer, but much more understandable).
</p><p>
Hopefully Stephan will pick the changes in the "rebase protocol" up, and then
we can have a sequencer with which I can start to make a graphical interactive
rebase using git-gui.  Or gitk.
</p><p>
Maybe.]]></description>
</item>
</channel>
</rss>
