<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Dscho's Git log</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html</link>
<atom:link href="http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=blog.rss" rel="self" type="application/rss+xml"/>
<description>A few stories told by Dscho</description>
<lastBuildDate>Mon, 08 Feb 2010 14:04:17 +0100</lastBuildDate>
<language>en-us</language>
<item>
<title>Trying to get more time for msysGit</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1265634257</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1265634257</guid>
<pubDate>Mon, 08 Feb 2010 14:04:17 +0100</pubDate>
<description><![CDATA[Trying to get more time for msysGit
</p><p>
Nowadays, the msysGit project is driven forward mostly by Heiko Voigt,
Erik Faye-Lund, and of course the invaluable mingw.git work of Hannes
Sixt. The new-SVN, MinGW-SVN and MinGW-Python projects have stalled.
The latest msysGit release is <u>months</u> old.
</p><p>
It does not help that certain people on the Git mailing list write
looooong emails that nobody with my schedule can hope to read, rather
than being nice and spending some time to phrase what they have to
say in a <u>concise</u> manner.
</p><p>
Oh well. I will just concentrate on JGit and msysGit instead of
upstream Git, if I get some Git time.]]></description>
</item>
<item>
<title>Avoiding to get angry</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1259765885</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1259765885</guid>
<pubDate>Wed, 02 Dec 2009 15:58:05 +0100</pubDate>
<description><![CDATA[Avoiding to get angry
</p><p>
Despite many intelligent people realizing that the recent
change to special case http, https and ftp was a terrible decision, it
seems that there is enough resistance left on the Git mailing list to
keep the brain-dead current state.
</p><p>
The Git mailing list is definitely giving me more grief than joy these
days.]]></description>
</item>
<item>
<title>Git will never be user-friendly</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1255867912</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1255867912</guid>
<pubDate>Sun, 18 Oct 2009 14:11:52 +0200</pubDate>
<description><![CDATA[Git will never be user-friendly
</p><p>
Recently, encouraged by quite some private encouragement, I thought I could
take on the task of teaching the core Git developers how user-unfriendly
Git is, and that they should be more open to change (especially given that
1.7.0 was already announced to be a version that breaks recent expectations,
something I would have expected to merit a 2.0 -- but who am I anyway?).
</p><p>
It is quite ironic, in a very cruel sense, that those people who are such
big fans of educating the users instead of fixing their tools are unable
to be educated about something that should be obvious.
</p><p>
Yes, I am bitter.]]></description>
</item>
<item>
<title>GitTogether in Berlin</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1254868748</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1254868748</guid>
<pubDate>Wed, 07 Oct 2009 00:39:08 +0200</pubDate>
<description><![CDATA[GitTogether in Berlin
</p><p>
We had a GitTogether in Berlin, called "Alles wird Git" (past tense: "Alles
wurde Git").  It was great fun, we never had even a single boring minute,
and our special guest -- Gitzilla -- turned out to be quite some entertainer,
especially when he starting reciting a few of my most outrageous emails &#x263a;
</p><p>
There were a lot of good discussions, among other things about submodules (our
neglected child), Git Cheetah, and foreign VCS helpers (in particular Sverre's
plan to provide some Mercurial backend).
</p><p>
One of the most important outcomes for me was, though, to realize just how
detached we in the Git project are from our user base.  A few years back, we
could get away with saying "we have only developers as users, so they should
just sit down and scratch their own itch".
</p><p>
But today, we have a lot of users who never learnt to code (or who code in
some other language than C, or whose code we would not even want to review &#x263a;),
and we lose quite a few brownie points by keeping things complicated.
</p><p>
Now, in a lot of cases it cannot be helped.  For example, we have confusing
names for things, inconsistent namings even (as with "remote" vs "tracked"
branches), and we have some odd design decisions (like calling some program
almost nobody uses "git cherry", which makes tab-completion of the rather
often-used "git cherry-pick" pretty awkward).  The latter example also
illustrates that we have names for porcelains that are rather long, when
they should be rather short.
</p><p>
So, yes, we have a lot of things that do not work well, because we have
usability issues that need to be preserved for hysterical raisins.
</p><p>
This is unfortunate enough, but it seems that we even fsck up with usability
issues we <u>can</u> solve.  Just think about "git checkout -b origin/master".  A
typo?  Yes, of course!  But a rather obvious one.
</p><p>
Another case which was discussed on the mailing list recently: "git checkout
next" when clearly "git checkout origin/next" was meant.
</p><p>
The biggest problem, though, is that almost all people on the Git mailing list
who are respected by the maintainer are obviously too detached from the user
base to realize just how difficult Git <u>still</u> is.  And refuse to do anything
about it, or even to allow others to do anything about it.
</p><p>
It almost seems as if the Git wizards do not want Git to become easier to
use, lest they lose their special status.
</p><p>
My biggest problem is that it seems that my input gets more and more ignored,
or perceived as some crazy ideas that will just go away (which is true, because
I am pretty happy about a day-job that keeps me more than just busy, so I do not
have time not fight windmills, let alone motiviation to do so).
</p><p>
Even when a real user comes along to chime in, he's just brushed off, by an
otherwise very polite maintainer.
</p><p>
I am not even sure if I want to continue sending my patches from my personal
tree upstream, because things get so frustrating, for little to show in return.]]></description>
</item>
<item>
<title>The dilemma of being correct</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1249835938</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1249835938</guid>
<pubDate>Sun, 09 Aug 2009 18:38:58 +0200</pubDate>
<description><![CDATA[The dilemma of being correct
</p><p>
So I am opinionated.  No news there.  The problem of being opinionated, though,
is that people do not take you seriously even if you are correct.
</p><p>
For example, I vividly remember having had concerns about the Git wrapper
being linked to <a href=http://curl.haxx.se/>cURL</a>, and I vividly remember
that our maintainer did not have such concerns and took Daniel's patch.  I could
not find proof of my public comment quickly enough to add a link here, though.
</p><p>
Alas, there are serious problems with being correct:
</p><p>
<ol>
<li>If you're correct, you waste a lot of time trying to convince people (but
they ignore you nevertheless),
<li>Other people are regularly p*ssed off, especially when they find out
(or even worse, when it is pointed out to them) that they were wrong, and
<li>You can buy <u>nothing</u> for having been correct.
</ol>
</p><p>
It is a lose-lose situation.
</p><p>
In the current context, I am pretty certain that the rev cache and the pack
index are so similar in nature that we'll find quite a few issues that we had
with one repeated with the other.
</p><p>
As I <u>hate</u> losing time over a discussion others try to "win" -- which
invariably means that they refuse to be convinced of anything disagreeing with
their opinion &#x263a; -- I will just shut up, and probably have one or two odd
feelings when it turns out I was right.]]></description>
</item>
<item>
<title>The GraphGUI project</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1245419588</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1245419588</guid>
<pubDate>Fri, 19 Jun 2009 15:53:08 +0200</pubDate>
<description><![CDATA[The GraphGUI project
</p><p>
After a few unfortunate delays (and some fortunate ones, just not for us), the
GraphGUI project finally takes off.  A quick first glance:
</p><p>
<center><img src=dscho.git?a=blob_plain;hb=c33212b23b2b3e45c14403efe82cabb1cd53f6e3;f=basic-gui.jpg basic-gui.jpg></center>
</p><p>
The delays were a bit unnerving, but the student is really bright and still
has the chance to pull the project off.
</p><p>
Next plans are to show text, too, to invent a rudimentary layout engine that
can be adjusted manually (this is in contrast to <i>gitk</i> or <i>log --graph</i>).
</p><p>
After that, integration into JGit (this probably triggered the eGit/JGit
split).
</p><p>
And then we'll go wild!]]></description>
</item>
<item>
<title>Wasting way too much time on msysGit</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1242408298</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1242408298</guid>
<pubDate>Fri, 15 May 2009 19:24:58 +0200</pubDate>
<description><![CDATA[Wasting way too much time on msysGit
</p><p>
I recently got into the bad habit of spending a large amount of my waking
hours working on msysGit, more than is really healthy for me.
</p><p>
For example, I spent the whole morning -- when I should have worked on a
very important day-job project -- on trying to fix issue 258, where
<i>git web--browse</i> does not work as expected because of quoting issues
with cmd.exe.
</p><p>
This is reducing my Git time budget to negative numbers, so much so that I
cannot even work on Git projects that I actually like, such as <i>jgit diff</i>
or <i>git rebase -i -p</i>, or at least projects I felt obliged to continue
to work on, such as <i>git notes</i>.
</p><p>
Now, some people who tried to teach me some time management strongly
criticized me for ignoring their lessons, and unfortunately, I have to agree.
</p><p>
The problem is that I would <u>hate</u> to see msysGit fall to the same state it
was after I stopped working on it last year.  I started it, and I would like
it to grow, but too few people took care of the issue tracker, too few tried
to debug their problems themselves, too few submitted fixes.
</p><p>
I note, though, that there is a positive trend.  But being the impatient person
I am ("2 seconds is my attention span") I tend to want the trend to be more
impressive.
</p><p>
Anyway, no work on msysGit for at least 4 days, that's what the doctor (me)
said...]]></description>
</item>
<item>
<title>Working on jgit diff</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1241995759</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1241995759</guid>
<pubDate>Mon, 11 May 2009 00:49:19 +0200</pubDate>
<description><![CDATA[Working on jgit diff
</p><p>
Shawn did so many useful things that I use on a daily basis that I felt really
awful when I realized just how <u>long</u> I had promised to clean up that diff
implementation I wrote for JGit.
</p><p>
Alas, it appears that the thing turned out to be almost a complete rewrite, as
the original implementation walked the edit graph in a rather inefficient way.
</p><p>
A little background: Myers' algorithm to generate "an edit script" works on
the <i>edit graph</i>: imagine you have all lines of file <i>A</i> as columns and
all lines of file <i>B</i> as rows, then the <i>edit graph</i> is a connection of
the upper left corner to the lower right corner, containing only horizontal,
vertical or diagonal elements, where diagonal elements are only allowed when
the lines of both files agree at that point:
</p><p>
<pre>
 H E L L O , W O R L D
 ----
L    \
      ---
O        \
          ---
W            \
              --------
</pre>
</p><p>
The <i>shortest</i> edit path minimizes the number of non-diagonal elements.
</p><p>
Myers' idea is to develop forward and backward paths at the same time
(increasing the number of non-diagonal elements uniformly), storing
only the latest end points.  Once the paths meet, divide and conquer.
</p><p>
In theory, it would be quicker to store <u>all</u> end points and then just
reconstruct the shortest paths, alas, this takes way too much memory.
</p><p>
My first implementation did not remember start or end of the non-diagonal
parts, and had to recurse way more often than really necessary (in the end,
we will order the non-diagonal parts into horizontal and vertical parts
anyway, so start and end are sufficient).
</p><p>
The current progress can be seen <a href=http://repo.or.cz/w/egit/dscho.git/>
here</a>.]]></description>
</item>
<item>
<title>No time for Git</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1239975597</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1239975597</guid>
<pubDate>Fri, 17 Apr 2009 15:39:57 +0200</pubDate>
<description><![CDATA[No time for Git
</p><p>
It is a shame, but most of my Git time budget is taken by msysGit these
days.
</p><p>
But at least msysGit is moving again; I'll probably write a Herald about
it.]]></description>
</item>
<item>
<title>How to recover from a hackathon</title>
<link>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1238970571</link>
<guid>http://repo.or.cz/w/git/dscho.git?a=blob_plain;hb=blog;f=index.html#1238970571</guid>
<pubDate>Mon, 06 Apr 2009 00:29:31 +0200</pubDate>
<description><![CDATA[How to recover from a hackathon
</p><p>
Phew, 2 crazy and fantastic weeks are behind me.  But it takes its toll:
a weekend I was more offline than online.
</p><p>
Things that are important now: relax. sleep. take a walk. learn to sleep
more than 4 hours a night again. learn to watch a movie without thinking
about code. go for a run.
</p><p>
And after recovering, back to the rebase-i-p branch!]]></description>
</item>
</channel>
</rss>
